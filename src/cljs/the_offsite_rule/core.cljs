(ns the-offsite-rule.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [the-offsite-rule.form :as form]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/results" :results] 
    ["/new" :new]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

(path-for :about)
;; -------------------------
;; Page components

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to the-offsite-rule"]
     [:ul
      [:li [:a {:href (path-for :new)} "Find location"]]
      [:li [:a {:href (path-for :about)} "About us"]]
      ]]))

(defn new-run-page []
  (fn []
    [:span.main
     [:h1 "Enter people and postcodes"]
     (form/postcode-entry-form)
     [:a {:href (path-for :results)} "Get results"]]))


(defn results-page []
  (fn []
    [:span.main
     [:h1 "Results"]
     [:a {:href (path-for :index)} "Home"]
     ]))


;;(defn item-page []
  ;;(fn []
    ;;(let [routing-data (session/get :route)
          ;;item (get-in routing-data [:route-params :item-id])]
      ;;[:span.main
       ;;[:h1 (str "Item " item " of the-offsite-rule")]
       ;;[:p [:a {:href (path-for :items)} "Back to the list of items"]]])))
;;

(defn about-page []
  (fn [] [:span.main
          [:h1 "About the-offsite-rule"]]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page
    :about #'about-page
    :results #'results-page
    :new #'new-run-page
    ))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About the-offsite-rule"]]]
       [page]
       [:footer
        [:p "the-offsite-rule was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (reagent/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
